//
//  IPSecKitTests.swift
//  IPSecKitTests
//
//  Created by Blair Mitchelmore on 2019-11-18.
//  Copyright Â© 2019 Blair Mitchelmore. All rights reserved.
//

import XCTest
import BigInt
//@testable import IPSecKit

//private func rand(_ count: Int) -> Data {
//    var buffer = [UInt8](repeating: 0, count: count)
//    _ = SecRandomCopyBytes(kSecRandomDefault, count, &buffer)
//    return Data(buffer)
//}

class IPSecKitTests: XCTestCase {

    func testRandomBigInt() {
        print("generating bigints")
        let generator = BigUInt("2")
        let privateKey = BigUInt("4832030853581793223801644502612986933896117407318526543825171788112565973341731905671670630416713703548049825843122483594678460089016684196310766363269758848030691579387656214824513778698925934627358126825958896344532445127548424505708241695626799044128868483683064340722430907865445294638102556348244518644515106492508213924101183264748046884038641214018745718234416175605875767590764601141225968856100862089621249265950639177541926314441130931313889167655629378265745762788848290406330570370690080731407584342040236789526738033498492722779556552684963610397520581097947251966994143788804196946034077970650059072316120248381736812050594004485957037242951156755328871006698911526506207154935218100601038241687825035744487220995632475736037689219483781115414385352931220873499188694569334390530467072286880176417171857941177357548944275276573968539670647673422542229952022513194812712093471103313990574252452241000641684620136")
        let prime = BigUInt("5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807")
        print("generating g^a%p")
        let start = ProcessInfo.processInfo.systemUptime
        let result = generator.power(privateKey, modulus: prime)
        let end = ProcessInfo.processInfo.systemUptime
        print("time taken: \(end - start)")
        print("result: \(result)")
    }


}
